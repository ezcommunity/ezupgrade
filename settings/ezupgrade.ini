[General]
# All eZ Publish versions in descending, upgradable order
Versions[]=4.2.0
Versions[]=4.1.4
Versions[]=4.1.3
Versions[]=4.1.2
Versions[]=4.1.1
Versions[]=4.1.0
Versions[]=4.0.4
Versions[]=4.0.3
Versions[]=4.0.2
Versions[]=4.0.1
Versions[]=4.0.0

# The placement of the original eZ distros (including trailing slash)
# Alternative values are a local path, or false if they should be fetched
# from their respective placements as specified in the DownloadURL setting
# of each version
#
# If a path is specified, the file names of each distro should be in the format
# of ezpublish-[version-no]-gpl.tar.gz
DistroLocation=false


[Upgrade_4.2.0]

# The URL from where the distro can be downloaded
DownloadURL=http://ez.no/content/download/282761/2618664/version/4/file/ezpublish-4.2.0-full-gpl.tar.gz

# This setting specifices how far back the current version holds upgrade scripts, SQLs
# and the likes. If the version we are upgrading from is older than this, we can not
# upgrade directly, and we need to upgrade to the most recent version which holds upgrade
# data going back further than our current version.
UpgradeContainerSinceVersion=4.0.0

# Whether or not the version is a maintenance release, meaning that that it there has already
# been release an eZ Publish version in a higher minor version, and that this release is 
# just to fix bugs in the current minor.
MaintenanceRelease=false

# A list of requirements for this version. This could be things like version of PHP, 
# eZ Components, or other server requirements. The checks for requirements should be defined
# as methods in classes/requirements.php
Requirements[]=PHP5
Requirements[]=eZC20082

# A list of upgrade functions that need to be run. Upgrade functions need to be
# created for each upgrade script, and any other changes that need to be applied
# for the current version. Upgrade functions should be created as methods in 
# classes/upgradefunctions.php
#
# The second value (after the semicolon) dictates whether or not the function should
# be run depending on the version the user is upgrading from.
# If no value exists, the upgrade function will be run regardless of previous version.
# If a version number is provided, the script will not be run unless the previous version
# is older than the provided version number
UpgradeFunctions[]=updateDB402
UpgradeFunctions[]=generateAutoLoads

[Upgrade_4.1.4]
DownloadURL=http://ez.no/content/download/282767/2618711/version/1/file/ezpublish-4.1.4-gpl.tar.gz
MaintenanceRelease=true
Requirements[]=PHP5
Requirements[]=eZC20082
UpgradeFunctions=updateDB414
UpgradeFunctions=generateAutoLoads

[Upgrade_4.1.3]

# The URL from where the distro can be downloaded
DownloadURL=http://ez.no/content/download/270151/2473827/version/3/file/ezpublish-4.1.3-gpl.tar.gz

# This setting specifices how far back the current version holds upgrade scripts, SQLs
# and the likes. If the version we are upgrading from is older than this, we can not
# upgrade directly, and we need to upgrade to the most recent version which holds upgrade
# data going back further than our current version.
UpgradeContainerSinceVersion=4.0.0

# Whether or not the version is a maintenance release, meaning that that it there has already
# been release an eZ Publish version in a higher minor version, and that this release is 
# just to fix bugs in the current minor.
MaintenanceRelease=false

# A list of requirements for this version. This could be things like version of PHP, 
# eZ Components, or other server requirements. The checks for requirements should be defined
# as methods in classes/requirements.php
Requirements[]=PHP5
Requirements[]=eZC20082

# A list of upgrade functions that need to be run. Upgrade functions need to be
# created for each upgrade script, and any other changes that need to be applied
# for the current version. Upgrade functions should be created as methods in 
# classes/upgradefunctions.php
#
# The second value (after the semicolon) dictates whether or not the function should
# be run depending on the version the user is upgrading from.
# If no value exists, the upgrade function will be run regardless of previous version.
# If a version number is provided, the script will not be run unless the previous version
# is older than the provided version number
UpgradeFunctions[]=updateDB413
UpgradeFunctions[]=generateAutoLoads

[Upgrade_4.1.2]

# The URL from where the distro can be downloaded
#DownloadURL=

# This setting specifices how far back the current version holds upgrade scripts, SQLs
# and the likes. If the version we are upgrading from is older than this, we can not
# upgrade directly, and we need to upgrade to the most recent version which holds upgrade
# data going back further than our current version.
UpgradeContainerSinceVersion=4.0.0

# Whether or not the version is a maintenance release, meaning that that it there has already
# been release an eZ Publish version in a higher minor version, and that this release is 
# just to fix bugs in the current minor.
MaintenanceRelease=false

# A list of requirements for this version. This could be things like version of PHP, 
# eZ Components, or other server requirements. The checks for requirements should be defined
# as methods in classes/requirements.php
Requirements[]=PHP5
Requirements[]=eZC20082

# A list of upgrade functions that need to be run. Upgrade functions need to be
# created for each upgrade script, and any other changes that need to be applied
# for the current version. Upgrade functions should be created as methods in 
# classes/upgradefunctions.php
#
# The second value (after the semicolon) dictates whether or not the function should
# be run depending on the version the user is upgrading from.
# If no value exists, the upgrade function will be run regardless of previous version.
# If a version number is provided, the script will not be run unless the previous version
# is older than the provided version number
UpgradeFunctions[]=updateDB412
UpgradeFunctions[]=generateAutoLoads

[Upgrade_4.1.1]

# The URL from where the distro can be downloaded
DownloadURL=http://ez.no/content/download/266143/1872452

# This setting specifices how far back the current version holds upgrade scripts, SQLs
# and the likes. If the version we are upgrading from is older than this, we can not
# upgrade directly, and we need to upgrade to the most recent version which holds upgrade
# data going back further than our current version.
UpgradeContainerSinceVersion=4.0.0

# Whether or not the version is a maintenance release, meaning that that it there has already
# been release an eZ Publish version in a higher minor version, and that this release is 
# just to fix bugs in the current minor.
MaintenanceRelease=false

# A list of requirements for this version. This could be things like version of PHP, 
# eZ Components, or other server requirements. The checks for requirements should be defined
# as methods in classes/requirements.php
Requirements[]=PHP5
Requirements[]=eZC20082

# A list of upgrade functions that need to be run. Upgrade functions need to be
# created for each upgrade script, and any other changes that need to be applied
# for the current version. Upgrade functions should be created as methods in 
# classes/upgradefunctions.php
#
# The second value (after the semicolon) dictates whether or not the function should
# be run depending on the version the user is upgrading from.
# If no value exists, the upgrade function will be run regardless of previous version.
# If a version number is provided, the script will not be run unless the previous version
# is older than the provided version number
UpgradeFunctions[]=updateOERewriteRules
UpgradeFunctions[]=updateImageSystem
UpgradeFunctions[]=updateDB411
UpgradeFunctions[]=generateAutoLoads
UpgradeFunctions[]=updateDBOE501
UpgradeFunctions[]=upgradeScripts41;4.1.0